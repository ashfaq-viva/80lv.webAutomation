name: CI_80LV-docker

on:
  workflow_dispatch:
    inputs:
      target_env:
        description: "Target environment"
        required: true
        default: "80LV_PROD"
        type: choice
        options: [80LV_PROD, 80LV_QA, 80LV_DEV]
  push:
    branches: [main]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  e2e-docker:
    runs-on: ubuntu-latest
    env:
      ENV: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && '80LV_PROD' || github.event.inputs.target_env }}
      PROJECT_ID: docker
      REPORT_ID: ${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

# ========================================================
# 🔑 Create a .env for the tests from Variables + Secrets
# ========================================================
      - name: Generate .env for tests
        shell: bash
        run: |
          set -e
          echo "BASE_URL_80LV_PROD=${{ vars.BASE_URL_80LV_PROD }}"   >> .env
          echo "BASE_URL_80LV_QA=${{ vars.BASE_URL_80LV_QA }}"       >> .env
          echo "TALENT_EMAIL=${{ secrets.TALENT_EMAIL }}"             >> .env
          echo "TALENT_PASSWORD=${{ secrets.TALENT_PASSWORD }}"       >> .env
          echo "RECRUITER_EMAIL=${{ secrets.RECRUITER_EMAIL }}"       >> .env
          echo "RECRUITER_PASSWORD=${{ secrets.RECRUITER_PASSWORD }}" >> .env
          echo "ENV=${ENV}" >> .env
          echo "----- .env (sanitized) -----"
          grep -E '^(ENV|BASE_URL)' .env || true
          echo "----------------------------"
# ==============================
# 🔑 Docker build & compose run
# ==============================
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build e2e image (from your Dockerfile)
        run: docker compose -f docker-compose.yml build e2e
# ============
# 🔽 Run Test
# ============
      - name: Run tests in Docker (bind-mount results)
        shell: bash
        run: |
          rm -rf allure-results allure-report playwright-report || true
          mkdir -p allure-results allure-report playwright-report

          # 👇 Tell Compose to use bind mounts in CI
          export ALLURE_RESULTS_MOUNT=./allure-results
          export PLAYWRIGHT_REPORT_MOUNT=./playwright-report
          export ALLURE_REPORT_MOUNT=./allure-report
          export ALLURE_HISTORY_MOUNT=./allure-history

          export RUN_NPM_CI=1
          export E2E_USER=root

          ENV="${ENV}" docker compose run --rm e2e
# =======================================
# 🔽 Check gh-pages existence & restore
# =======================================
      - name: Check gh-pages existence
        id: has-ghpages
        shell: bash
        run: |
          if git ls-remote --heads "https://github.com/${{ github.repository }}.git" gh-pages | grep gh-pages >/dev/null; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "✅ gh-pages exists"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "ℹ️ gh-pages does not exist yet (first deploy)"
          fi

      - name: Checkout gh-pages (history restore)
        if: always() && steps.has-ghpages.outputs.exists == 'true'
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          persist-credentials: false

      - name: Restore Allure history
        if: always()
        run: |
          if [ -d gh-pages/projects/${PROJECT_ID}/history ]; then
            echo "🔁 Restoring Allure history for project=${PROJECT_ID}"
            rm -rf allure-results/history
            mkdir -p allure-results/history
            cp -r gh-pages/projects/${PROJECT_ID}/history/* allure-results/history/ || true
          else
            echo "ℹ️ No previous history found for ${PROJECT_ID}"
          fi
# ===========================
# 🔽 Generate Allure report
# ===========================
      # ⬅️ NEW: Allure needs Java, install on runner
      - name: Set up Java (for Allure)               
        if: always()                                 
        uses: actions/setup-java@v4                  
        with:                                        
          distribution: temurin                      
          java-version: '17'                         

      # ⬅️ NEW: Install Allure CLI on the runner (avoid docker pull/auth issues)
      - name: Install Allure CLI                     
        if: always()                                 
        run: |                                   
          curl -L -o allure.tgz https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
          sudo tar -zxvf allure.tgz -C /opt/
          echo "/opt/allure-2.27.0/bin" >> $GITHUB_PATH

      # ⬅️ CHANGED: Use local allure CLI instead of dockerized CLI
      - name: Generate Allure Report                
        if: always()                                 
        run: |                                       
          allure --version
          allure generate allure-results --clean -o allure-report/projects/${REPORT_ID}
          ls -lah allure-report/projects/${REPORT_ID} || true
# ============================
# 🔽 Upload helpful artifacts
# ============================
      - name: Upload Allure HTML (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ env.REPORT_ID }}
          path: allure-report/projects/${{ env.REPORT_ID }}
          if-no-files-found: warn

      - name: Upload Global Setup Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: global-setup-artifacts
          path: artifacts/global-setup/**/*
          if-no-files-found: ignore 
          
      - name: Upload Videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-videos-${{ env.REPORT_ID }}
          path: allure-report/projects/${{ env.REPORT_ID }}/data/attachments/*.webm
          if-no-files-found: ignore

      - name: Upload Failure Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: failure-screenshots-${{ env.REPORT_ID }}
          path: allure-report/projects/${{ env.REPORT_ID }}/data/attachments/*.png
          if-no-files-found: ignore
          retention-days: 7
# ========================
# 🔽 GitHub Pages publish
# ========================
      - name: Setup Pages
        if: always()
        uses: actions/configure-pages@v5

      - name: Upload Allure site to Pages
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report

      - name: Deploy to GitHub Pages
        if: always()
        id: deploy
        uses: actions/deploy-pages@v4

      - name: Add Report Link to Summary
        if: always()
        run: |
          echo "## ✅ Docker Test Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[👉 View Docker Report](https://ashfaq-viva.github.io/80lv.webAutomation/projects/${{ env.REPORT_ID }})" >> $GITHUB_STEP_SUMMARY
# ===============================
# 🔽 Sent Email of results
# ===============================
      - name: Install mailx
        run: sudo apt-get install -y mailutils

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Configure mailx for SMTP
        run: |
          echo "set smtp=smtps://smtp.gmail.com:465" >> ~/.mailrc
          echo "set smtp-auth=login" >> ~/.mailrc
          echo "set smtp-auth-user=${{ secrets.SMTP_USERNAME }}" >> ~/.mailrc
          echo "set smtp-auth-password=${{ secrets.SMTP_PASSWORD }}" >> ~/.mailrc
          echo "set ssl-verify=ignore" >> ~/.mailrc

      - name: Extract Key Test Summary
        run: |
          REPORT_PATH="allure-report/projects/${{ env.REPORT_ID }}/widgets/summary.json"
          
          if [ -f "$REPORT_PATH" ]; then
            jq -r '"80LV Automation Report(Docker): \(.reportName) | Passed: \(.statistic.passed) | Failed: \(.statistic.failed) | Total: \(.statistic.total)"' $REPORT_PATH > summary.txt
            echo "" >> summary.txt
            echo "👉 View full report(docker): https://ashfaq-viva.github.io/80lv.webAutomation/projects/${{ env.REPORT_ID }}" >> summary.txt
          else
            echo "No summary found. Check if tests executed correctly." > summary.txt
            echo "" >> summary.txt
            echo "👉 View full report: https://ashfaq-viva.github.io/80lv.webAutomation/projects/${{ env.REPORT_ID }}" >> summary.txt
          fi
        shell: /usr/bin/bash -e {0}
        env:
          ENV: 80LV_PROD
          PROJECT_ID: docker
          REPORT_ID: 4ec2dabd8685d7e38b302415606059436f1a9e06
          JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.16-8/x64
          JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.16-8/x64
          GITHUB_PAGES: true


      - name: Send Email with Allure Report
        run: |
          cat summary.txt | mailx -s "80LV Automation Test Report Summary"  ashfaq.ahmed@vivasoftltd.com


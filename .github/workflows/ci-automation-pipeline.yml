name: CI_80LV

on:
  workflow_dispatch:
    inputs:
      target_env:
        description: "Target environment"
        required: true
        default: "80LV_PROD"
        type: choice
        options: [80LV_PROD, 80LV_QA, 80LV_DEV]
  push:
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    env:
        ENV: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && '80LV_PROD' || github.event.inputs.target_env }}
        PROJECT_ID: ci
        REPORT_ID: ${{ github.run_number }}-${{ github.run_id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

# =============================================
# ✅ Caches npm’s download cache automatically
# =============================================
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            package-lock.json
            **/package-lock.json
# ========================
# 🔽 Install dependencies
# ========================
      - name: Install dependencies
        run: npm ci
# =========================================
# ✅ Cache Playwright browsers (Linux path)
# =========================================
      - name: Cache Playwright Browsers
        id: cache-pw
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: pw-browsers-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: pw-browsers-${{ runner.os }}-
# ======================================
# 🔽 Install browsers only if cache miss
# ======================================
      - name: Install Playwright Browsers
        if: steps.cache-pw.outputs.cache-hit != 'true'
        run: npx playwright install
# ===============================
# ✅ Cache & Install Allure
# ===============================
     # 
      - name: Cache Allure CLI
        id: cache-allure
        uses: actions/cache@v3
        with:
          path: /opt/allure-2.24.0
          key: allure-${{ runner.os }}-2.24.0
          restore-keys: allure-${{ runner.os }}-

      # ✅ Install when cache MISS
      - name: Install Allure CLI
        if: steps.cache-allure.outputs.cache-hit != 'true'
        run: |
          sudo apt update
          sudo apt install -y curl unzip
          curl -L -o allure.tgz https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          sudo tar -zxvf allure.tgz -C /opt/
          # add to PATH for subsequent steps
          echo "/opt/allure-2.24.0/bin" >> $GITHUB_PATH

      # ✅ Use cached Allure (also add PATH)
      - name: Setup Allure from cache
        if: steps.cache-allure.outputs.cache-hit == 'true'
        run: echo "/opt/allure-2.24.0/bin" >> $GITHUB_PATH

      # ✅ Verify Allure (separate step so PATH works)
      - name: Verify Allure
        run: allure --version

      - name: Clear Previous Allure Results
        run: |
          rm -rf allure-results allure-report allure-history || true
          mkdir -p allure-results allure-report allure-history
# ========================================================
# 🔑 Create a .env for the tests from Variables + Secrets
# ========================================================
      - name: Generate .env for tests
        shell: bash
        run: |
          set -e
          echo "BASE_URL_80LV_PROD=${{ vars.BASE_URL_80LV_PROD }}"   >> .env
          echo "BASE_URL_80LV_QA=${{ vars.BASE_URL_80LV_QA }}"       >> .env
          echo "TALENT_EMAIL=${{ secrets.TALENT_EMAIL }}"               >> .env
          echo "TALENT_PASSWORD=${{ secrets.TALENT_PASSWORD }}"         >> .env
          echo "RECRUITER_EMAIL=${{ secrets.RECRUITER_EMAIL }}"         >> .env
          echo "RECRUITER_PASSWORD=${{ secrets.RECRUITER_PASSWORD }}"   >> .env
          echo "GMAIL_EMAIL=${{ secrets.GMAIL_EMAIL }}"   >> .env
          echo "GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}"   >> .env
          echo "ENV=${ENV}" >> .env
          echo "----- .env (sanitized) -----"
          grep -E '^(ENV|BASE_URL)' .env || true
          echo "----------------------------"
# ============
# 🔽 Run Test
# ============
      - name: Run Playwright Tests
        run: npx cross-env ENV=${ENV} playwright test
# =====================================================
# 🔽 Always run uploads even if global setup/tests fail
# =====================================================
      - name: Upload Global Setup Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: global-setup-artifacts
          path: artifacts/global-setup/**/*
          if-no-files-found: ignore  
# ===============================
# 🔽 Allure GitHub Pages publish
# ===============================
      - name: Check gh-pages existence
        id: has-ghpages
        shell: bash
        run: |
          if git ls-remote --heads "https://github.com/${{ github.repository }}.git" gh-pages | grep gh-pages >/dev/null; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "✅ gh-pages exists"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "ℹ️ gh-pages does not exist yet (first deploy)"
          fi

      # ✅ Only checkout gh-pages when it actually exists
      - name: Checkout gh-pages (history restore)
        if: always() && steps.has-ghpages.outputs.exists == 'true'
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          persist-credentials: false

      - name: Restore Allure history
        if: always()
        run: |
          if [ -d gh-pages/projects/${PROJECT_ID}/history ]; then
            echo "🔁 Restoring Allure history from gh-pages/projects/${PROJECT_ID}/history"
            rm -rf allure-history
            mkdir -p allure-history
            cp -r gh-pages/projects/${PROJECT_ID}/history allure-history
          else
            echo "ℹ️ No previous history found"
          fi

      - name: Generate Allure Report for Pages
        if: always()
        run: |
          allure generate allure-results --clean -o allure-report/projects/${REPORT_ID}
          ls -lah allure-report/projects/${REPORT_ID} || true
# ============================
# 🔽 Merge history and upload
# ============================
      - name: Merge existing history with the new report
        if: always()
        run: |
          mkdir -p allure-report/projects/${REPORT_ID}/history
          cp -r allure-results/history/* allure-report/projects/${REPORT_ID}/history/ || true
          touch allure-report/projects/${REPORT_ID}/.nojekyll
# ===============================
# 🔽 Upload Videos Of Tests
# ===============================
      - name: Upload Allure Report Videos 
        if: always() 
        uses: actions/upload-artifact@v4 
        with: 
          name: allure-videos 
          path: allure-report/projects/${{ env.REPORT_ID }}/data/attachments/*.webm 
          if-no-files-found: ignore
# ===============================
# 🔽 Upload Failure Screenshots 
# ===============================
      - name: Upload Failure Screenshots
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: failure-screenshots
          path: allure-report/projects/${{ env.REPORT_ID }}/data/attachments/*.png
          retention-days: 7
          if-no-files-found: ignore

      - name: Setup Pages
        if: always()
        uses: actions/configure-pages@v5

      - name: Upload Allure site to Pages
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report/projects/${{ env.REPORT_ID }}

      - name: Deploy to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-report/projects/${{ env.REPORT_ID }}
          destination_dir: projects/${{ env.REPORT_ID }}
          keep_files: true

      - name: Add Report Link to Summary
        if: always()
        run: |
          echo "## ✅ Test Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[👉 Click to view report](https://ashfaq-viva.github.io/80lv.webAutomation/projects/${{ env.REPORT_ID }})" >> $GITHUB_STEP_SUMMARY

# ===============================
# 🔽 Sent Email of results
# ===============================
      - name: Install mailx
        run: sudo apt-get install -y mailutils

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Configure mailx for SMTP
        run: |
          echo "set smtp=smtps://smtp.gmail.com:465" >> ~/.mailrc
          echo "set smtp-auth=login" >> ~/.mailrc
          echo "set smtp-auth-user=${{ secrets.SMTP_USERNAME }}" >> ~/.mailrc
          echo "set smtp-auth-password=${{ secrets.SMTP_PASSWORD }}" >> ~/.mailrc
          echo "set ssl-verify=ignore" >> ~/.mailrc

      - name: Extract Key Test Summary
        run: |
          REPORT_PATH="allure-report/projects/${{ env.REPORT_ID }}/widgets/summary.json"
          
          if [ -f "$REPORT_PATH" ]; then
            jq -r '"80LV Automation Report(CI): Passed: \(.statistic.passed) | Failed: \(.statistic.failed) | Total: \(.statistic.total)"' $REPORT_PATH > summary.txt
            echo "" >> summary.txt
            echo "👉 View full report(CI): https://ashfaq-viva.github.io/80lv.webAutomation/projects/${{ env.REPORT_ID }}" >> summary.txt
          else
            echo "No summary found. Check if tests executed correctly." > summary.txt
            echo "" >> summary.txt
            echo "👉 View full report(CI): https://ashfaq-viva.github.io/80lv.webAutomation/projects/${{ env.REPORT_ID }}" >> summary.txt
          fi

      - name: Send Email with Allure Report
        run: |
          cat summary.txt | mailx -s "80LV Automation Test Report Summary"  ashfaq.ahmed@vivasoftltd.com
